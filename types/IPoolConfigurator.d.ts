/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPoolConfiguratorInterface extends ethers.utils.Interface {
  functions: {
    "configureReserveAsCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "dropReserve(address)": FunctionFragment;
    "initReserves(tuple[])": FunctionFragment;
    "setAssetEModeCategory(address,uint8)": FunctionFragment;
    "setBorrowCap(address,uint256)": FunctionFragment;
    "setBorrowableInIsolation(address,bool)": FunctionFragment;
    "setDebtCeiling(address,uint256)": FunctionFragment;
    "setEModeCategory(uint8,uint16,uint16,uint16,address,string)": FunctionFragment;
    "setLiquidationProtocolFee(address,uint256)": FunctionFragment;
    "setPoolPause(bool)": FunctionFragment;
    "setReserveActive(address,bool)": FunctionFragment;
    "setReserveBorrowing(address,bool)": FunctionFragment;
    "setReserveFactor(address,uint256)": FunctionFragment;
    "setReserveFreeze(address,bool)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,address)": FunctionFragment;
    "setReservePause(address,bool)": FunctionFragment;
    "setReserveStableRateBorrowing(address,bool)": FunctionFragment;
    "setSiloedBorrowing(address,bool)": FunctionFragment;
    "setSupplyCap(address,uint256)": FunctionFragment;
    "setUnbackedMintCap(address,uint256)": FunctionFragment;
    "updateAToken((address,address,address,string,string,address,bytes))": FunctionFragment;
    "updateBridgeProtocolFee(uint256)": FunctionFragment;
    "updateFlashloanPremiumToProtocol(uint128)": FunctionFragment;
    "updateFlashloanPremiumTotal(uint128)": FunctionFragment;
    "updateStableDebtToken((address,address,string,string,address,bytes))": FunctionFragment;
    "updateVariableDebtToken((address,address,string,string,address,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "configureReserveAsCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dropReserve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initReserves",
    values: [
      {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetEModeCategory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowableInIsolation",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEModeCategory",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationProtocolFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveActive",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveBorrowing",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFreeze",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePause",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveStableRateBorrowing",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSiloedBorrowing",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbackedMintCap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAToken",
    values: [
      {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanPremiumToProtocol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanPremiumTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStableDebtToken",
    values: [
      {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVariableDebtToken",
    values: [
      {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowableInIsolation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveStableRateBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSiloedBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbackedMintCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanPremiumToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanPremiumTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStableDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVariableDebtToken",
    data: BytesLike
  ): Result;

  events: {
    "ATokenUpgraded(address,address,address)": EventFragment;
    "BorrowCapChanged(address,uint256,uint256)": EventFragment;
    "BorrowableInIsolationChanged(address,bool)": EventFragment;
    "BridgeProtocolFeeUpdated(uint256,uint256)": EventFragment;
    "CollateralConfigurationChanged(address,uint256,uint256,uint256)": EventFragment;
    "DebtCeilingChanged(address,uint256,uint256)": EventFragment;
    "EModeAssetCategoryChanged(address,uint8,uint8)": EventFragment;
    "EModeCategoryAdded(uint8,uint256,uint256,uint256,address,string)": EventFragment;
    "FlashloanPremiumToProtocolUpdated(uint128,uint128)": EventFragment;
    "FlashloanPremiumTotalUpdated(uint128,uint128)": EventFragment;
    "LiquidationProtocolFeeChanged(address,uint256,uint256)": EventFragment;
    "ReserveActive(address,bool)": EventFragment;
    "ReserveBorrowing(address,bool)": EventFragment;
    "ReserveDropped(address)": EventFragment;
    "ReserveFactorChanged(address,uint256,uint256)": EventFragment;
    "ReserveFrozen(address,bool)": EventFragment;
    "ReserveInitialized(address,address,address,address,address)": EventFragment;
    "ReserveInterestRateStrategyChanged(address,address,address)": EventFragment;
    "ReservePaused(address,bool)": EventFragment;
    "ReserveStableRateBorrowing(address,bool)": EventFragment;
    "SiloedBorrowingChanged(address,bool,bool)": EventFragment;
    "StableDebtTokenUpgraded(address,address,address)": EventFragment;
    "SupplyCapChanged(address,uint256,uint256)": EventFragment;
    "UnbackedMintCapChanged(address,uint256,uint256)": EventFragment;
    "VariableDebtTokenUpgraded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ATokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowCapChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowableInIsolationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeProtocolFeeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollateralConfigurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtCeilingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EModeAssetCategoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EModeCategoryAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FlashloanPremiumToProtocolUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FlashloanPremiumTotalUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationProtocolFeeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveBorrowing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDropped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFactorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveInterestRateStrategyChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveStableRateBorrowing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SiloedBorrowingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableDebtTokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnbackedMintCapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VariableDebtTokenUpgraded"): EventFragment;
}

export type ATokenUpgradedEvent = TypedEvent<
  [string, string, string] & {
    asset: string;
    proxy: string;
    implementation: string;
  }
>;

export type BorrowCapChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldBorrowCap: BigNumber;
    newBorrowCap: BigNumber;
  }
>;

export type BorrowableInIsolationChangedEvent = TypedEvent<
  [string, boolean] & { asset: string; borrowable: boolean }
>;

export type BridgeProtocolFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldBridgeProtocolFee: BigNumber;
    newBridgeProtocolFee: BigNumber;
  }
>;

export type CollateralConfigurationChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    asset: string;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
  }
>;

export type DebtCeilingChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldDebtCeiling: BigNumber;
    newDebtCeiling: BigNumber;
  }
>;

export type EModeAssetCategoryChangedEvent = TypedEvent<
  [string, number, number] & {
    asset: string;
    oldCategoryId: number;
    newCategoryId: number;
  }
>;

export type EModeCategoryAddedEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, string, string] & {
    categoryId: number;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    oracle: string;
    label: string;
  }
>;

export type FlashloanPremiumToProtocolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldFlashloanPremiumToProtocol: BigNumber;
    newFlashloanPremiumToProtocol: BigNumber;
  }
>;

export type FlashloanPremiumTotalUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldFlashloanPremiumTotal: BigNumber;
    newFlashloanPremiumTotal: BigNumber;
  }
>;

export type LiquidationProtocolFeeChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldFee: BigNumber;
    newFee: BigNumber;
  }
>;

export type ReserveActiveEvent = TypedEvent<
  [string, boolean] & { asset: string; active: boolean }
>;

export type ReserveBorrowingEvent = TypedEvent<
  [string, boolean] & { asset: string; enabled: boolean }
>;

export type ReserveDroppedEvent = TypedEvent<[string] & { asset: string }>;

export type ReserveFactorChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldReserveFactor: BigNumber;
    newReserveFactor: BigNumber;
  }
>;

export type ReserveFrozenEvent = TypedEvent<
  [string, boolean] & { asset: string; frozen: boolean }
>;

export type ReserveInitializedEvent = TypedEvent<
  [string, string, string, string, string] & {
    asset: string;
    aToken: string;
    stableDebtToken: string;
    variableDebtToken: string;
    interestRateStrategyAddress: string;
  }
>;

export type ReserveInterestRateStrategyChangedEvent = TypedEvent<
  [string, string, string] & {
    asset: string;
    oldStrategy: string;
    newStrategy: string;
  }
>;

export type ReservePausedEvent = TypedEvent<
  [string, boolean] & { asset: string; paused: boolean }
>;

export type ReserveStableRateBorrowingEvent = TypedEvent<
  [string, boolean] & { asset: string; enabled: boolean }
>;

export type SiloedBorrowingChangedEvent = TypedEvent<
  [string, boolean, boolean] & {
    asset: string;
    oldState: boolean;
    newState: boolean;
  }
>;

export type StableDebtTokenUpgradedEvent = TypedEvent<
  [string, string, string] & {
    asset: string;
    proxy: string;
    implementation: string;
  }
>;

export type SupplyCapChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldSupplyCap: BigNumber;
    newSupplyCap: BigNumber;
  }
>;

export type UnbackedMintCapChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    asset: string;
    oldUnbackedMintCap: BigNumber;
    newUnbackedMintCap: BigNumber;
  }
>;

export type VariableDebtTokenUpgradedEvent = TypedEvent<
  [string, string, string] & {
    asset: string;
    proxy: string;
    implementation: string;
  }
>;

export class IPoolConfigurator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolConfiguratorInterface;

  functions: {
    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dropReserve(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetEModeCategory(
      asset: string,
      newCategoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowCap(
      asset: string,
      newBorrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowableInIsolation(
      asset: string,
      borrowable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtCeiling(
      asset: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEModeCategory(
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: string,
      label: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationProtocolFee(
      asset: string,
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolPause(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveActive(
      asset: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFactor(
      asset: string,
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFreeze(
      asset: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      newRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReservePause(
      asset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveStableRateBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSiloedBorrowing(
      asset: string,
      siloed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyCap(
      asset: string,
      newSupplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnbackedMintCap(
      asset: string,
      newUnbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAToken(
      input: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBridgeProtocolFee(
      newBridgeProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFlashloanPremiumToProtocol(
      newFlashloanPremiumToProtocol: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFlashloanPremiumTotal(
      newFlashloanPremiumTotal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVariableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  configureReserveAsCollateral(
    asset: string,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dropReserve(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initReserves(
    input: {
      aTokenImpl: string;
      stableDebtTokenImpl: string;
      variableDebtTokenImpl: string;
      underlyingAssetDecimals: BigNumberish;
      interestRateStrategyAddress: string;
      underlyingAsset: string;
      treasury: string;
      incentivesController: string;
      aTokenName: string;
      aTokenSymbol: string;
      variableDebtTokenName: string;
      variableDebtTokenSymbol: string;
      stableDebtTokenName: string;
      stableDebtTokenSymbol: string;
      params: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetEModeCategory(
    asset: string,
    newCategoryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowCap(
    asset: string,
    newBorrowCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowableInIsolation(
    asset: string,
    borrowable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtCeiling(
    asset: string,
    newDebtCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEModeCategory(
    categoryId: BigNumberish,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    oracle: string,
    label: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationProtocolFee(
    asset: string,
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolPause(
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveActive(
    asset: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveBorrowing(
    asset: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFactor(
    asset: string,
    newReserveFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFreeze(
    asset: string,
    freeze: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    asset: string,
    newRateStrategyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReservePause(
    asset: string,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveStableRateBorrowing(
    asset: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSiloedBorrowing(
    asset: string,
    siloed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyCap(
    asset: string,
    newSupplyCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnbackedMintCap(
    asset: string,
    newUnbackedMintCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAToken(
    input: {
      asset: string;
      treasury: string;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBridgeProtocolFee(
    newBridgeProtocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFlashloanPremiumToProtocol(
    newFlashloanPremiumToProtocol: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFlashloanPremiumTotal(
    newFlashloanPremiumTotal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStableDebtToken(
    input: {
      asset: string;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVariableDebtToken(
    input: {
      asset: string;
      incentivesController: string;
      name: string;
      symbol: string;
      implementation: string;
      params: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dropReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    initReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetEModeCategory(
      asset: string,
      newCategoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowCap(
      asset: string,
      newBorrowCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowableInIsolation(
      asset: string,
      borrowable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtCeiling(
      asset: string,
      newDebtCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEModeCategory(
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: string,
      label: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationProtocolFee(
      asset: string,
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPause(paused: boolean, overrides?: CallOverrides): Promise<void>;

    setReserveActive(
      asset: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFactor(
      asset: string,
      newReserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFreeze(
      asset: string,
      freeze: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      newRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservePause(
      asset: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveStableRateBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSiloedBorrowing(
      asset: string,
      siloed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyCap(
      asset: string,
      newSupplyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnbackedMintCap(
      asset: string,
      newUnbackedMintCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAToken(
      input: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateBridgeProtocolFee(
      newBridgeProtocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlashloanPremiumToProtocol(
      newFlashloanPremiumToProtocol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlashloanPremiumTotal(
      newFlashloanPremiumTotal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateVariableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ATokenUpgraded(address,address,address)"(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;

    ATokenUpgraded(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;

    "BorrowCapChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldBorrowCap?: null,
      newBorrowCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldBorrowCap: BigNumber; newBorrowCap: BigNumber }
    >;

    BorrowCapChanged(
      asset?: string | null,
      oldBorrowCap?: null,
      newBorrowCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldBorrowCap: BigNumber; newBorrowCap: BigNumber }
    >;

    "BorrowableInIsolationChanged(address,bool)"(
      asset?: null,
      borrowable?: null
    ): TypedEventFilter<
      [string, boolean],
      { asset: string; borrowable: boolean }
    >;

    BorrowableInIsolationChanged(
      asset?: null,
      borrowable?: null
    ): TypedEventFilter<
      [string, boolean],
      { asset: string; borrowable: boolean }
    >;

    "BridgeProtocolFeeUpdated(uint256,uint256)"(
      oldBridgeProtocolFee?: null,
      newBridgeProtocolFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldBridgeProtocolFee: BigNumber; newBridgeProtocolFee: BigNumber }
    >;

    BridgeProtocolFeeUpdated(
      oldBridgeProtocolFee?: null,
      newBridgeProtocolFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldBridgeProtocolFee: BigNumber; newBridgeProtocolFee: BigNumber }
    >;

    "CollateralConfigurationChanged(address,uint256,uint256,uint256)"(
      asset?: string | null,
      ltv?: null,
      liquidationThreshold?: null,
      liquidationBonus?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        asset: string;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
      }
    >;

    CollateralConfigurationChanged(
      asset?: string | null,
      ltv?: null,
      liquidationThreshold?: null,
      liquidationBonus?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        asset: string;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
      }
    >;

    "DebtCeilingChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldDebtCeiling: BigNumber; newDebtCeiling: BigNumber }
    >;

    DebtCeilingChanged(
      asset?: string | null,
      oldDebtCeiling?: null,
      newDebtCeiling?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldDebtCeiling: BigNumber; newDebtCeiling: BigNumber }
    >;

    "EModeAssetCategoryChanged(address,uint8,uint8)"(
      asset?: string | null,
      oldCategoryId?: null,
      newCategoryId?: null
    ): TypedEventFilter<
      [string, number, number],
      { asset: string; oldCategoryId: number; newCategoryId: number }
    >;

    EModeAssetCategoryChanged(
      asset?: string | null,
      oldCategoryId?: null,
      newCategoryId?: null
    ): TypedEventFilter<
      [string, number, number],
      { asset: string; oldCategoryId: number; newCategoryId: number }
    >;

    "EModeCategoryAdded(uint8,uint256,uint256,uint256,address,string)"(
      categoryId?: BigNumberish | null,
      ltv?: null,
      liquidationThreshold?: null,
      liquidationBonus?: null,
      oracle?: null,
      label?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber, BigNumber, string, string],
      {
        categoryId: number;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        oracle: string;
        label: string;
      }
    >;

    EModeCategoryAdded(
      categoryId?: BigNumberish | null,
      ltv?: null,
      liquidationThreshold?: null,
      liquidationBonus?: null,
      oracle?: null,
      label?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber, BigNumber, string, string],
      {
        categoryId: number;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        oracle: string;
        label: string;
      }
    >;

    "FlashloanPremiumToProtocolUpdated(uint128,uint128)"(
      oldFlashloanPremiumToProtocol?: null,
      newFlashloanPremiumToProtocol?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldFlashloanPremiumToProtocol: BigNumber;
        newFlashloanPremiumToProtocol: BigNumber;
      }
    >;

    FlashloanPremiumToProtocolUpdated(
      oldFlashloanPremiumToProtocol?: null,
      newFlashloanPremiumToProtocol?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldFlashloanPremiumToProtocol: BigNumber;
        newFlashloanPremiumToProtocol: BigNumber;
      }
    >;

    "FlashloanPremiumTotalUpdated(uint128,uint128)"(
      oldFlashloanPremiumTotal?: null,
      newFlashloanPremiumTotal?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldFlashloanPremiumTotal: BigNumber;
        newFlashloanPremiumTotal: BigNumber;
      }
    >;

    FlashloanPremiumTotalUpdated(
      oldFlashloanPremiumTotal?: null,
      newFlashloanPremiumTotal?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldFlashloanPremiumTotal: BigNumber;
        newFlashloanPremiumTotal: BigNumber;
      }
    >;

    "LiquidationProtocolFeeChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldFee: BigNumber; newFee: BigNumber }
    >;

    LiquidationProtocolFeeChanged(
      asset?: string | null,
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldFee: BigNumber; newFee: BigNumber }
    >;

    "ReserveActive(address,bool)"(
      asset?: string | null,
      active?: null
    ): TypedEventFilter<[string, boolean], { asset: string; active: boolean }>;

    ReserveActive(
      asset?: string | null,
      active?: null
    ): TypedEventFilter<[string, boolean], { asset: string; active: boolean }>;

    "ReserveBorrowing(address,bool)"(
      asset?: string | null,
      enabled?: null
    ): TypedEventFilter<[string, boolean], { asset: string; enabled: boolean }>;

    ReserveBorrowing(
      asset?: string | null,
      enabled?: null
    ): TypedEventFilter<[string, boolean], { asset: string; enabled: boolean }>;

    "ReserveDropped(address)"(
      asset?: string | null
    ): TypedEventFilter<[string], { asset: string }>;

    ReserveDropped(
      asset?: string | null
    ): TypedEventFilter<[string], { asset: string }>;

    "ReserveFactorChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldReserveFactor?: null,
      newReserveFactor?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        asset: string;
        oldReserveFactor: BigNumber;
        newReserveFactor: BigNumber;
      }
    >;

    ReserveFactorChanged(
      asset?: string | null,
      oldReserveFactor?: null,
      newReserveFactor?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        asset: string;
        oldReserveFactor: BigNumber;
        newReserveFactor: BigNumber;
      }
    >;

    "ReserveFrozen(address,bool)"(
      asset?: string | null,
      frozen?: null
    ): TypedEventFilter<[string, boolean], { asset: string; frozen: boolean }>;

    ReserveFrozen(
      asset?: string | null,
      frozen?: null
    ): TypedEventFilter<[string, boolean], { asset: string; frozen: boolean }>;

    "ReserveInitialized(address,address,address,address,address)"(
      asset?: string | null,
      aToken?: string | null,
      stableDebtToken?: null,
      variableDebtToken?: null,
      interestRateStrategyAddress?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        asset: string;
        aToken: string;
        stableDebtToken: string;
        variableDebtToken: string;
        interestRateStrategyAddress: string;
      }
    >;

    ReserveInitialized(
      asset?: string | null,
      aToken?: string | null,
      stableDebtToken?: null,
      variableDebtToken?: null,
      interestRateStrategyAddress?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        asset: string;
        aToken: string;
        stableDebtToken: string;
        variableDebtToken: string;
        interestRateStrategyAddress: string;
      }
    >;

    "ReserveInterestRateStrategyChanged(address,address,address)"(
      asset?: string | null,
      oldStrategy?: null,
      newStrategy?: null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; oldStrategy: string; newStrategy: string }
    >;

    ReserveInterestRateStrategyChanged(
      asset?: string | null,
      oldStrategy?: null,
      newStrategy?: null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; oldStrategy: string; newStrategy: string }
    >;

    "ReservePaused(address,bool)"(
      asset?: string | null,
      paused?: null
    ): TypedEventFilter<[string, boolean], { asset: string; paused: boolean }>;

    ReservePaused(
      asset?: string | null,
      paused?: null
    ): TypedEventFilter<[string, boolean], { asset: string; paused: boolean }>;

    "ReserveStableRateBorrowing(address,bool)"(
      asset?: string | null,
      enabled?: null
    ): TypedEventFilter<[string, boolean], { asset: string; enabled: boolean }>;

    ReserveStableRateBorrowing(
      asset?: string | null,
      enabled?: null
    ): TypedEventFilter<[string, boolean], { asset: string; enabled: boolean }>;

    "SiloedBorrowingChanged(address,bool,bool)"(
      asset?: string | null,
      oldState?: null,
      newState?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { asset: string; oldState: boolean; newState: boolean }
    >;

    SiloedBorrowingChanged(
      asset?: string | null,
      oldState?: null,
      newState?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { asset: string; oldState: boolean; newState: boolean }
    >;

    "StableDebtTokenUpgraded(address,address,address)"(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;

    StableDebtTokenUpgraded(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;

    "SupplyCapChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldSupplyCap?: null,
      newSupplyCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldSupplyCap: BigNumber; newSupplyCap: BigNumber }
    >;

    SupplyCapChanged(
      asset?: string | null,
      oldSupplyCap?: null,
      newSupplyCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { asset: string; oldSupplyCap: BigNumber; newSupplyCap: BigNumber }
    >;

    "UnbackedMintCapChanged(address,uint256,uint256)"(
      asset?: string | null,
      oldUnbackedMintCap?: null,
      newUnbackedMintCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        asset: string;
        oldUnbackedMintCap: BigNumber;
        newUnbackedMintCap: BigNumber;
      }
    >;

    UnbackedMintCapChanged(
      asset?: string | null,
      oldUnbackedMintCap?: null,
      newUnbackedMintCap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        asset: string;
        oldUnbackedMintCap: BigNumber;
        newUnbackedMintCap: BigNumber;
      }
    >;

    "VariableDebtTokenUpgraded(address,address,address)"(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;

    VariableDebtTokenUpgraded(
      asset?: string | null,
      proxy?: string | null,
      implementation?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { asset: string; proxy: string; implementation: string }
    >;
  };

  estimateGas: {
    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dropReserve(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetEModeCategory(
      asset: string,
      newCategoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowCap(
      asset: string,
      newBorrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowableInIsolation(
      asset: string,
      borrowable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtCeiling(
      asset: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEModeCategory(
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: string,
      label: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationProtocolFee(
      asset: string,
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolPause(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveActive(
      asset: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFactor(
      asset: string,
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFreeze(
      asset: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      newRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReservePause(
      asset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveStableRateBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSiloedBorrowing(
      asset: string,
      siloed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyCap(
      asset: string,
      newSupplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnbackedMintCap(
      asset: string,
      newUnbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAToken(
      input: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBridgeProtocolFee(
      newBridgeProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFlashloanPremiumToProtocol(
      newFlashloanPremiumToProtocol: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFlashloanPremiumTotal(
      newFlashloanPremiumTotal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVariableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureReserveAsCollateral(
      asset: string,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dropReserve(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initReserves(
      input: {
        aTokenImpl: string;
        stableDebtTokenImpl: string;
        variableDebtTokenImpl: string;
        underlyingAssetDecimals: BigNumberish;
        interestRateStrategyAddress: string;
        underlyingAsset: string;
        treasury: string;
        incentivesController: string;
        aTokenName: string;
        aTokenSymbol: string;
        variableDebtTokenName: string;
        variableDebtTokenSymbol: string;
        stableDebtTokenName: string;
        stableDebtTokenSymbol: string;
        params: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetEModeCategory(
      asset: string,
      newCategoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowCap(
      asset: string,
      newBorrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowableInIsolation(
      asset: string,
      borrowable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtCeiling(
      asset: string,
      newDebtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEModeCategory(
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: string,
      label: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationProtocolFee(
      asset: string,
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolPause(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveActive(
      asset: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      asset: string,
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFreeze(
      asset: string,
      freeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      newRateStrategyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReservePause(
      asset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveStableRateBorrowing(
      asset: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSiloedBorrowing(
      asset: string,
      siloed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyCap(
      asset: string,
      newSupplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnbackedMintCap(
      asset: string,
      newUnbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAToken(
      input: {
        asset: string;
        treasury: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBridgeProtocolFee(
      newBridgeProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashloanPremiumToProtocol(
      newFlashloanPremiumToProtocol: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashloanPremiumTotal(
      newFlashloanPremiumTotal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVariableDebtToken(
      input: {
        asset: string;
        incentivesController: string;
        name: string;
        symbol: string;
        implementation: string;
        params: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
