/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SupplyLogicInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
    "Supply(address,address,address,uint256,uint16)": EventFragment;
    "Withdraw(address,address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ReserveUsedAsCollateralDisabledEvent = TypedEvent<
  [string, string] & { reserve: string; user: string }
>;

export type ReserveUsedAsCollateralEnabledEvent = TypedEvent<
  [string, string] & { reserve: string; user: string }
>;

export type SupplyEvent = TypedEvent<
  [string, string, string, BigNumber, number] & {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: BigNumber;
    referralCode: number;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    reserve: string;
    user: string;
    to: string;
    amount: BigNumber;
  }
>;

export class SupplyLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SupplyLogicInterface;

  functions: {};

  callStatic: {};

  filters: {
    "ReserveUsedAsCollateralDisabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    ReserveUsedAsCollateralDisabled(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    "ReserveUsedAsCollateralEnabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    ReserveUsedAsCollateralEnabled(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    "Supply(address,address,address,uint256,uint16)"(
      reserve?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      amount?: null,
      referralCode?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        reserve: string;
        user: string;
        onBehalfOf: string;
        amount: BigNumber;
        referralCode: number;
      }
    >;

    Supply(
      reserve?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      amount?: null,
      referralCode?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        reserve: string;
        user: string;
        onBehalfOf: string;
        amount: BigNumber;
        referralCode: number;
      }
    >;

    "Withdraw(address,address,address,uint256)"(
      reserve?: string | null,
      user?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { reserve: string; user: string; to: string; amount: BigNumber }
    >;

    Withdraw(
      reserve?: string | null,
      user?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { reserve: string; user: string; to: string; amount: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
