/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockReserveInterestRateStrategy,
  MockReserveInterestRateStrategyInterface,
} from "../MockReserveInterestRateStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPoolAddressesProvider",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "optimalUsageRatio",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseVariableBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "variableRateSlope1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "variableRateSlope2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stableRateSlope1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stableRateSlope2",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract IPoolAddressesProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OPTIMAL_USAGE_RATIO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "unbacked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityAdded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityTaken",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalStableDebt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalVariableDebt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "averageStableBorrowRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactor",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "reserve",
            type: "address",
          },
          {
            internalType: "address",
            name: "aToken",
            type: "address",
          },
        ],
        internalType: "struct DataTypes.CalculateInterestRatesParams",
        name: "",
        type: "tuple",
      },
    ],
    name: "calculateInterestRates",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stableBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "variableBorrowRate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseVariableBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxVariableBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStableRateSlope1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStableRateSlope2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVariableRateSlope1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVariableRateSlope2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liquidityRate",
        type: "uint256",
      },
    ],
    name: "setLiquidityRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stableBorrowRate",
        type: "uint256",
      },
    ],
    name: "setStableBorrowRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "variableBorrowRate",
        type: "uint256",
      },
    ],
    name: "setVariableBorrowRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61016060405234801561001157600080fd5b506040516105d63803806105d683398101604081905261003091610061565b6080959095526001600160a01b0390951660a05260c09290925260e0526101005261012091909152610140526100ca565b600080600080600080600060e0888a03121561007c57600080fd5b87516001600160a01b038116811461009357600080fd5b602089015160408a015160608b015160808c015160a08d015160c0909d0151949e939d50919b909a50909850965090945092505050565b60805160a05160c05160e05161010051610120516101405161049e610138600039600061015c0152600061024b015260008181610271015261029901526000818161012c01526102bd01526000818161018201526102de0152600060de015260006101c0015261049e6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806380031e3711610081578063cecced511161005b578063cecced5114610236578063d5cd739114610249578063f42024091461026f57600080fd5b806380031e37146101e2578063a5898709146101ea578063aa16fe341461022357600080fd5b806334762ca5116100b257806334762ca5146101805780633a244adf146101a657806354c365c6146101bb57600080fd5b80630542975c146100d95780630b3429a21461012a57806314e32da41461015a575b600080fd5b6101007f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610121565b7f000000000000000000000000000000000000000000000000000000000000000061014c565b7f000000000000000000000000000000000000000000000000000000000000000061014c565b6101b96101b4366004610311565b600055565b005b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b61014c610295565b6102086101f83660046103a4565b6000546001546002549193909250565b60408051938452602084019290925290820152606001610121565b6101b9610231366004610311565b600255565b6101b9610244366004610311565b600155565b7f000000000000000000000000000000000000000000000000000000000000000061014c565b7f000000000000000000000000000000000000000000000000000000000000000061014c565b60007f00000000000000000000000000000000000000000000000000000000000000006103027f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610429565b61030c9190610429565b905090565b60006020828403121561032357600080fd5b5035919050565b604051610120810167ffffffffffffffff81118282101715610375577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461039f57600080fd5b919050565b600061012082840312156103b757600080fd5b6103bf61032a565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015261040b60e0840161037b565b60e082015261010061041e81850161037b565b908201529392505050565b60008219821115610463577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220e319dbc0539341a77b1d77ffc47f2e19252833765b4e48a5df9be8bed722f18464736f6c634300080a0033";

export class MockReserveInterestRateStrategy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    provider: string,
    optimalUsageRatio: BigNumberish,
    baseVariableBorrowRate: BigNumberish,
    variableRateSlope1: BigNumberish,
    variableRateSlope2: BigNumberish,
    stableRateSlope1: BigNumberish,
    stableRateSlope2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockReserveInterestRateStrategy> {
    return super.deploy(
      provider,
      optimalUsageRatio,
      baseVariableBorrowRate,
      variableRateSlope1,
      variableRateSlope2,
      stableRateSlope1,
      stableRateSlope2,
      overrides || {}
    ) as Promise<MockReserveInterestRateStrategy>;
  }
  getDeployTransaction(
    provider: string,
    optimalUsageRatio: BigNumberish,
    baseVariableBorrowRate: BigNumberish,
    variableRateSlope1: BigNumberish,
    variableRateSlope2: BigNumberish,
    stableRateSlope1: BigNumberish,
    stableRateSlope2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      provider,
      optimalUsageRatio,
      baseVariableBorrowRate,
      variableRateSlope1,
      variableRateSlope2,
      stableRateSlope1,
      stableRateSlope2,
      overrides || {}
    );
  }
  attach(address: string): MockReserveInterestRateStrategy {
    return super.attach(address) as MockReserveInterestRateStrategy;
  }
  connect(signer: Signer): MockReserveInterestRateStrategy__factory {
    return super.connect(signer) as MockReserveInterestRateStrategy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockReserveInterestRateStrategyInterface {
    return new utils.Interface(
      _abi
    ) as MockReserveInterestRateStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReserveInterestRateStrategy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockReserveInterestRateStrategy;
  }
}
