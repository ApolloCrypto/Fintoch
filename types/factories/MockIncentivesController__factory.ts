/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockIncentivesController,
  MockIncentivesControllerInterface,
} from "../MockIncentivesController";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "ClaimerSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsAccrued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    inputs: [],
    name: "DISTRIBUTION_END",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "REWARD_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "assets",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimRewardsOnBehalf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "configureAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getAssetData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getClaimer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getRewardsBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getUserAssetData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getUserUnclaimedRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "handleAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setClaimer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610533806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379f171b21161008c57806399248ea71161006657806399248ea714610210578063aaf5eb6814610217578063f11b818814610226578063f5cf673b1461026357600080fd5b806379f171b2146101de5780638b599f26146101f2578063919cd40f1461020957600080fd5b806331873e2e116100c857806331873e2e146101615780633373ee4c146101765780636d34b96e1461018c57806374d945ec146101a557600080fd5b80631652e7b7146100ef578063198fa81e146101275780633111e7b314610149575b600080fd5b6101076100fd36600461029e565b5060009081908190565b604080519384526020840192909252908201526060015b60405180910390f35b61013b61013536600461029e565b50600090565b60405190815260200161011e565b61013b61015736600461030c565b6000949350505050565b61017461016f366004610369565b505050565b005b61013b61018436600461039c565b600092915050565b61013b61019a3660046103cf565b600095945050505050565b6101b96101b336600461029e565b50600190565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011e565b6101746101ec36600461043d565b50505050565b61013b6102003660046104a9565b60009392505050565b600061013b565b60006101b9565b6040516000815260200161011e565b6102346100fd36600461029e565b604080516fffffffffffffffffffffffffffffffff94851681529390921660208401529082015260600161011e565b61017461027136600461039c565b5050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029957600080fd5b919050565b6000602082840312156102b057600080fd5b6102b982610275565b9392505050565b60008083601f8401126102d257600080fd5b50813567ffffffffffffffff8111156102ea57600080fd5b6020830191508360208260051b850101111561030557600080fd5b9250929050565b6000806000806060858703121561032257600080fd5b843567ffffffffffffffff81111561033957600080fd5b610345878288016102c0565b9095509350506020850135915061035e60408601610275565b905092959194509250565b60008060006060848603121561037e57600080fd5b61038784610275565b95602085013595506040909401359392505050565b600080604083850312156103af57600080fd5b6103b883610275565b91506103c660208401610275565b90509250929050565b6000806000806000608086880312156103e757600080fd5b853567ffffffffffffffff8111156103fe57600080fd5b61040a888289016102c0565b9096509450506020860135925061042360408701610275565b915061043160608701610275565b90509295509295909350565b6000806000806040858703121561045357600080fd5b843567ffffffffffffffff8082111561046b57600080fd5b610477888389016102c0565b9096509450602087013591508082111561049057600080fd5b5061049d878288016102c0565b95989497509550505050565b6000806000604084860312156104be57600080fd5b833567ffffffffffffffff8111156104d557600080fd5b6104e1868287016102c0565b90945092506104f4905060208501610275565b9050925092509256fea2646970667358221220027cb0cb7241045887d512167900b9fca22e8cf79730809a30ce07680e6f12eb64736f6c634300080a0033";

export class MockIncentivesController__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockIncentivesController> {
    return super.deploy(overrides || {}) as Promise<MockIncentivesController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockIncentivesController {
    return super.attach(address) as MockIncentivesController;
  }
  connect(signer: Signer): MockIncentivesController__factory {
    return super.connect(signer) as MockIncentivesController__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIncentivesControllerInterface {
    return new utils.Interface(_abi) as MockIncentivesControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockIncentivesController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockIncentivesController;
  }
}
