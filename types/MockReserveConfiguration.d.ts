/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockReserveConfigurationInterface extends ethers.utils.Interface {
  functions: {
    "configuration()": FunctionFragment;
    "getBorrowCap()": FunctionFragment;
    "getBorrowingEnabled()": FunctionFragment;
    "getCaps()": FunctionFragment;
    "getDecimals()": FunctionFragment;
    "getEModeCategory()": FunctionFragment;
    "getFlags()": FunctionFragment;
    "getFrozen()": FunctionFragment;
    "getLiquidationBonus()": FunctionFragment;
    "getLiquidationProtocolFee()": FunctionFragment;
    "getLiquidationThreshold()": FunctionFragment;
    "getLtv()": FunctionFragment;
    "getParams()": FunctionFragment;
    "getReserveFactor()": FunctionFragment;
    "getStableRateBorrowingEnabled()": FunctionFragment;
    "getSupplyCap()": FunctionFragment;
    "getUnbackedMintCap()": FunctionFragment;
    "setBorrowCap(uint256)": FunctionFragment;
    "setBorrowingEnabled(bool)": FunctionFragment;
    "setDecimals(uint256)": FunctionFragment;
    "setEModeCategory(uint256)": FunctionFragment;
    "setFrozen(bool)": FunctionFragment;
    "setLiquidationBonus(uint256)": FunctionFragment;
    "setLiquidationProtocolFee(uint256)": FunctionFragment;
    "setLiquidationThreshold(uint256)": FunctionFragment;
    "setLtv(uint256)": FunctionFragment;
    "setReserveFactor(uint256)": FunctionFragment;
    "setStableRateBorrowingEnabled(bool)": FunctionFragment;
    "setSupplyCap(uint256)": FunctionFragment;
    "setUnbackedMintCap(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "configuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCaps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEModeCategory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFlags", values?: undefined): string;
  encodeFunctionData(functionFragment: "getFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLiquidationBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLtv", values?: undefined): string;
  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateBorrowingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnbackedMintCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEModeCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setLiquidationBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLtv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableRateBorrowingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbackedMintCap",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlags", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLtv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnbackedMintCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLtv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableRateBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbackedMintCap",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockReserveConfiguration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockReserveConfigurationInterface;

  functions: {
    configuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { data: BigNumber }>;

    getBorrowCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    getCaps(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEModeCategory(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFlags(
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

    getFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    getLiquidationBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidationProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLtv(overrides?: CallOverrides): Promise<[BigNumber]>;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getReserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStableRateBorrowingEnabled(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getSupplyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnbackedMintCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBorrowCap(
      borrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDecimals(
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEModeCategory(
      categoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFrozen(
      frozen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationBonus(
      bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationProtocolFee(
      liquidationProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLtv(
      ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveFactor(
      reserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableRateBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnbackedMintCap(
      unbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  configuration(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowingEnabled(overrides?: CallOverrides): Promise<boolean>;

  getCaps(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  getEModeCategory(overrides?: CallOverrides): Promise<BigNumber>;

  getFlags(
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

  getFrozen(overrides?: CallOverrides): Promise<boolean>;

  getLiquidationBonus(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidationProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getLtv(overrides?: CallOverrides): Promise<BigNumber>;

  getParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateBorrowingEnabled(overrides?: CallOverrides): Promise<boolean>;

  getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

  getUnbackedMintCap(overrides?: CallOverrides): Promise<BigNumber>;

  setBorrowCap(
    borrowCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowingEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDecimals(
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEModeCategory(
    categoryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFrozen(
    frozen: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationBonus(
    bonus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationProtocolFee(
    liquidationProtocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationThreshold(
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLtv(
    ltv: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveFactor(
    reserveFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableRateBorrowingEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyCap(
    supplyCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnbackedMintCap(
    unbackedMintCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    configuration(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingEnabled(overrides?: CallOverrides): Promise<boolean>;

    getCaps(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getEModeCategory(overrides?: CallOverrides): Promise<BigNumber>;

    getFlags(
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

    getFrozen(overrides?: CallOverrides): Promise<boolean>;

    getLiquidationBonus(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getLtv(overrides?: CallOverrides): Promise<BigNumber>;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateBorrowingEnabled(overrides?: CallOverrides): Promise<boolean>;

    getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    getUnbackedMintCap(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowCap(
      borrowCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowingEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecimals(
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEModeCategory(
      categoryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozen(frozen: boolean, overrides?: CallOverrides): Promise<void>;

    setLiquidationBonus(
      bonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationProtocolFee(
      liquidationProtocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationThreshold(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLtv(ltv: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setReserveFactor(
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableRateBorrowingEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnbackedMintCap(
      unbackedMintCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    configuration(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    getCaps(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getEModeCategory(overrides?: CallOverrides): Promise<BigNumber>;

    getFlags(overrides?: CallOverrides): Promise<BigNumber>;

    getFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationBonus(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getLtv(overrides?: CallOverrides): Promise<BigNumber>;

    getParams(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateBorrowingEnabled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    getUnbackedMintCap(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowCap(
      borrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDecimals(
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEModeCategory(
      categoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFrozen(
      frozen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationBonus(
      bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationProtocolFee(
      liquidationProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLtv(
      ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveFactor(
      reserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableRateBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnbackedMintCap(
      unbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCaps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEModeCategory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFlags(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationBonus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationProtocolFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLtv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStableRateBorrowingEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnbackedMintCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBorrowCap(
      borrowCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDecimals(
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEModeCategory(
      categoryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFrozen(
      frozen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationBonus(
      bonus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationProtocolFee(
      liquidationProtocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLtv(
      ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      reserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableRateBorrowingEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyCap(
      supplyCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnbackedMintCap(
      unbackedMintCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
