/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockReserveInterestRateStrategyInterface
  extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "OPTIMAL_USAGE_RATIO()": FunctionFragment;
    "calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address))": FunctionFragment;
    "getBaseVariableBorrowRate()": FunctionFragment;
    "getMaxVariableBorrowRate()": FunctionFragment;
    "getStableRateSlope1()": FunctionFragment;
    "getStableRateSlope2()": FunctionFragment;
    "getVariableRateSlope1()": FunctionFragment;
    "getVariableRateSlope2()": FunctionFragment;
    "setLiquidityRate(uint256)": FunctionFragment;
    "setStableBorrowRate(uint256)": FunctionFragment;
    "setVariableBorrowRate(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMAL_USAGE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [
      {
        unbacked: BigNumberish;
        liquidityAdded: BigNumberish;
        liquidityTaken: BigNumberish;
        totalStableDebt: BigNumberish;
        totalVariableDebt: BigNumberish;
        averageStableBorrowRate: BigNumberish;
        reserveFactor: BigNumberish;
        reserve: string;
        aToken: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVariableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVariableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableBorrowRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariableBorrowRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMAL_USAGE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVariableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVariableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariableBorrowRate",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockReserveInterestRateStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockReserveInterestRateStrategyInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    OPTIMAL_USAGE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInterestRates(
      arg0: {
        unbacked: BigNumberish;
        liquidityAdded: BigNumberish;
        liquidityTaken: BigNumberish;
        totalStableDebt: BigNumberish;
        totalVariableDebt: BigNumberish;
        averageStableBorrowRate: BigNumberish;
        reserveFactor: BigNumberish;
        reserve: string;
        aToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
      }
    >;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<[BigNumber]>;

    setLiquidityRate(
      liquidityRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableBorrowRate(
      stableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVariableBorrowRate(
      variableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  OPTIMAL_USAGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterestRates(
    arg0: {
      unbacked: BigNumberish;
      liquidityAdded: BigNumberish;
      liquidityTaken: BigNumberish;
      totalStableDebt: BigNumberish;
      totalVariableDebt: BigNumberish;
      averageStableBorrowRate: BigNumberish;
      reserveFactor: BigNumberish;
      reserve: string;
      aToken: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidityRate: BigNumber;
      stableBorrowRate: BigNumber;
      variableBorrowRate: BigNumber;
    }
  >;

  getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  setLiquidityRate(
    liquidityRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableBorrowRate(
    stableBorrowRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVariableBorrowRate(
    variableBorrowRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    OPTIMAL_USAGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestRates(
      arg0: {
        unbacked: BigNumberish;
        liquidityAdded: BigNumberish;
        liquidityTaken: BigNumberish;
        totalStableDebt: BigNumberish;
        totalVariableDebt: BigNumberish;
        averageStableBorrowRate: BigNumberish;
        reserveFactor: BigNumberish;
        reserve: string;
        aToken: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
      }
    >;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidityRate(
      liquidityRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableBorrowRate(
      stableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVariableBorrowRate(
      variableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMAL_USAGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestRates(
      arg0: {
        unbacked: BigNumberish;
        liquidityAdded: BigNumberish;
        liquidityTaken: BigNumberish;
        totalStableDebt: BigNumberish;
        totalVariableDebt: BigNumberish;
        averageStableBorrowRate: BigNumberish;
        reserveFactor: BigNumberish;
        reserve: string;
        aToken: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidityRate(
      liquidityRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableBorrowRate(
      stableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVariableBorrowRate(
      variableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPTIMAL_USAGE_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestRates(
      arg0: {
        unbacked: BigNumberish;
        liquidityAdded: BigNumberish;
        liquidityTaken: BigNumberish;
        totalStableDebt: BigNumberish;
        totalVariableDebt: BigNumberish;
        averageStableBorrowRate: BigNumberish;
        reserveFactor: BigNumberish;
        reserve: string;
        aToken: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVariableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLiquidityRate(
      liquidityRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableBorrowRate(
      stableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVariableBorrowRate(
      variableBorrowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
