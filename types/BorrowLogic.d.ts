/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BorrowLogicInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Borrow(address,address,address,uint256,uint8,uint256,uint16)": EventFragment;
    "IsolationModeTotalDebtUpdated(address,uint256)": EventFragment;
    "RebalanceStableBorrowRate(address,address)": EventFragment;
    "Repay(address,address,address,uint256,bool)": EventFragment;
    "SwapBorrowRateMode(address,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IsolationModeTotalDebtUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStableBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBorrowRateMode"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [string, string, string, BigNumber, number, BigNumber, number] & {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: BigNumber;
    interestRateMode: number;
    borrowRate: BigNumber;
    referralCode: number;
  }
>;

export type IsolationModeTotalDebtUpdatedEvent = TypedEvent<
  [string, BigNumber] & { asset: string; totalDebt: BigNumber }
>;

export type RebalanceStableBorrowRateEvent = TypedEvent<
  [string, string] & { reserve: string; user: string }
>;

export type RepayEvent = TypedEvent<
  [string, string, string, BigNumber, boolean] & {
    reserve: string;
    user: string;
    repayer: string;
    amount: BigNumber;
    useATokens: boolean;
  }
>;

export type SwapBorrowRateModeEvent = TypedEvent<
  [string, string, number] & {
    reserve: string;
    user: string;
    interestRateMode: number;
  }
>;

export class BorrowLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BorrowLogicInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Borrow(address,address,address,uint256,uint8,uint256,uint16)"(
      reserve?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      amount?: null,
      interestRateMode?: null,
      borrowRate?: null,
      referralCode?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, BigNumber, number],
      {
        reserve: string;
        user: string;
        onBehalfOf: string;
        amount: BigNumber;
        interestRateMode: number;
        borrowRate: BigNumber;
        referralCode: number;
      }
    >;

    Borrow(
      reserve?: string | null,
      user?: null,
      onBehalfOf?: string | null,
      amount?: null,
      interestRateMode?: null,
      borrowRate?: null,
      referralCode?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, BigNumber, number],
      {
        reserve: string;
        user: string;
        onBehalfOf: string;
        amount: BigNumber;
        interestRateMode: number;
        borrowRate: BigNumber;
        referralCode: number;
      }
    >;

    "IsolationModeTotalDebtUpdated(address,uint256)"(
      asset?: string | null,
      totalDebt?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; totalDebt: BigNumber }
    >;

    IsolationModeTotalDebtUpdated(
      asset?: string | null,
      totalDebt?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; totalDebt: BigNumber }
    >;

    "RebalanceStableBorrowRate(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    RebalanceStableBorrowRate(
      reserve?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; user: string }>;

    "Repay(address,address,address,uint256,bool)"(
      reserve?: string | null,
      user?: string | null,
      repayer?: string | null,
      amount?: null,
      useATokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, boolean],
      {
        reserve: string;
        user: string;
        repayer: string;
        amount: BigNumber;
        useATokens: boolean;
      }
    >;

    Repay(
      reserve?: string | null,
      user?: string | null,
      repayer?: string | null,
      amount?: null,
      useATokens?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, boolean],
      {
        reserve: string;
        user: string;
        repayer: string;
        amount: BigNumber;
        useATokens: boolean;
      }
    >;

    "SwapBorrowRateMode(address,address,uint8)"(
      reserve?: string | null,
      user?: string | null,
      interestRateMode?: null
    ): TypedEventFilter<
      [string, string, number],
      { reserve: string; user: string; interestRateMode: number }
    >;

    SwapBorrowRateMode(
      reserve?: string | null,
      user?: string | null,
      interestRateMode?: null
    ): TypedEventFilter<
      [string, string, number],
      { reserve: string; user: string; interestRateMode: number }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
